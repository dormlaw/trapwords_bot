require('dotenv').config();
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot(TOKEN, { polling: true });

const { messages } = require('./messages');
const Session = require('./session');

const sessions = new Map();
const players = new Map();

bot.onText(/\/test/, (msg) => {
  console.log(sessions)
  console.log(players)
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, messages.start.text, {
    parse_mode: 'Markdown',
  });
});

bot.onText(/\/rules/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, messages.rules_main.text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: messages.rules_main.keyboard
    }
  });
});

bot.onText(/\/leave/, (msg) => {
  const chatId = msg.chat.id;

  if (players.has(chatId)) {
    sessions.delete(players.get(chatId));
    players.delete(chatId);
    bot.sendMessage(chatId, '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É', {
      parse_mode: 'Markdown',
    });
  } else {
    bot.sendMessage(chatId, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–µ', {
      parse_mode: 'Markdown',
    });
  }
});

bot.onText(/\/new/, (msg) => {
  const chatId = msg.chat.id;

  if (!players.has(chatId)) {
    Session.code()
    const sessionCode = Session.code();
    let game = new Session(chatId, msg.chat.username);
    players.set(chatId, sessionCode);
    sessions.set(sessionCode, game);

    bot.sendMessage(chatId, `–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–≥—Ä—ã: \`${sessionCode}\`.`, {
      parse_mode: 'Markdown',
    });
    bot.sendMessage(chatId, messages.team_select.text,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: messages.team_select.keyboard
        }
      });
  } else {
    const sessionCode = players.get(chatId)
    bot.sendMessage(chatId, `–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã: \`${sessionCode}\`\n` + messages.team_select.text,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: messages.team_select.keyboard
        }
      });
  }
});

bot.onText(/\/join/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω', {
    parse_mode: 'Markdown',
  });
  
  bot.once("text", (msg) => {
    const session = msg.text;
    const game = sessions.get(session);
  
    if (!players.has(chatId) && sessions.has(session)) {
      players.set(chatId, session);
      game.addPlayer(chatId, msg.chat.username);
      bot.sendMessage(chatId, `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ: \`${session}\`.\n` + messages.team_select.text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: messages.team_select.keyboard
        }
      });
    } else if (sessions.has(session)) {
      bot.sendMessage(chatId, `–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ: \`${session}\`\n` + messages.team_select.text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: messages.team_select.keyboard
        }
      });
    } else {
      bot.sendMessage(chatId, '–¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', {
        parse_mode: 'Markdown',
      });
    }
  });
});


bot.on('callback_query', (callbackQuery) => {
  const action = callbackQuery.data;
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const sessionCode = players.get(chatId);
  const game = sessions.get(sessionCode);

  const teamPlayers = ()=> {
    let players = [[], []]
    game.team1.forEach(element => {
      players[0].push(game.name(element))
    });
    game.team2.forEach(element => {
      players[1].push(game.name(element))
    });
    return players
  }
  let teams

  switch (action) {
    //===Rules===
    case 'rules_main':
      bot.editMessageText(messages.rules_main.text, {
        chat_id: chatId,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: messages.rules_main.keyboard
        }
      });
      break;
    case 'rules_words':
      bot.editMessageText(messages.rules_words.text, {
        chat_id: chatId,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: messages.rules_words.keyboard
        }
      });
      break;

    //===Teams===
    case 'team1':
      if (!game.team1.includes(chatId) && !game.team2.includes(chatId)) {
        game.toTeam(chatId, 1);
        teams = teamPlayers();
        bot.editMessageText(`–ö–æ–º–º–∞–Ω–¥–∞ üëª: ${teams[0].toString()}\n–ö–æ–º–º–∞–Ω–¥–∞ üëΩ: ${teams[1].toString()}`, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      } else {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É', {
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      }
      break;
    case 'team2':
      if (!game.team1.includes(chatId) && !game.team2.includes(chatId)) {
        game.toTeam(chatId, 2);
        teams = teamPlayers();
        bot.editMessageText(`–ö–æ–º–∞–Ω–¥–∞ üëª: ${teams[0].toString()}\n–ö–æ–º–∞–Ω–¥–∞ üëΩ: ${teams[1].toString()}`, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      } else {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É', {
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      }
      break;
    case 'team_switch':
      if (game.team1.includes(chatId)) { delete game.team1[game.team1.indexOf(chatId)] }
      if (game.team2.includes(chatId)) { delete game.team2[game.team2.indexOf(chatId)] }
      teams = teamPlayers();
      bot.editMessageText(
        messages.team_select.text +
        `\n–ö–æ–º–∞–Ω–¥–∞ üëª: ${teams[0].toString()}\n–ö–æ–º–∞–Ω–¥–∞ üëΩ: ${teams[1].toString()}`, {
        chat_id: chatId,
        message_id: msg.message_id,
        reply_markup: {
          inline_keyboard: messages.team_select.keyboard
        }
      });
      break;
    case 'team_ready':
      teams = teamPlayers();
      if (game.fairPlay()) {
        bot.editMessageText(
          messages.team_ready.text +
          `\n–ö–æ–º–º–∞–Ω–¥–∞ üëª: ${teams[0].toString()}\n–ö–æ–º–∞–Ω–¥–∞ üëΩ: ${teams[1].toString()}`, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      } else {
        bot.editMessageText(
          '–ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã –∏ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º –ø–æ 2 –∏–≥—Ä–æ–∫–∞' +
          `\n–ö–æ–º–∞–Ω–¥–∞ üëª: ${teams[0].toString()}\n–ö–æ–º–∞–Ω–¥–∞ üëΩ: ${teams[1].toString()}`, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: messages.team_ready.keyboard
          }
        });
      }
      break;
  }
});